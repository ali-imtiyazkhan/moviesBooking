generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reservations Reservation[]
  tickets      Ticket[]
  transactions Transaction[]
}

enum Role {
  CUSTOMER
  ADMIN
}

model Theater {
  id        String   @id @default(uuid())
  name      String
  location  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  seats     Seat[]
  schedules Schedule[]
}

model Movie {
  id          String   @id @default(uuid())
  title       String
  description String?
  duration    Int
  rating      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  schedules Schedule[]
}

model Schedule {
  id        String   @id @default(uuid())
  movieId   String
  theaterId String
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  movie        Movie         @relation(fields: [movieId], references: [id])
  theater      Theater       @relation(fields: [theaterId], references: [id])
  reservations Reservation[]
  tickets      Ticket[]
}

model Seat {
  id        String  @id @default(uuid())
  theaterId String
  row       String
  number    Int
  isVip     Boolean @default(false)

  theater      Theater       @relation(fields: [theaterId], references: [id])
  reservations Reservation[]
}

model Reservation {
  id         String            @id @default(uuid())
  userId     String
  seatId     String
  scheduleId String
  status     ReservationStatus @default(PENDING)
  createdAt  DateTime          @default(now())

  user     User     @relation(fields: [userId], references: [id])
  seat     Seat     @relation(fields: [seatId], references: [id])
  schedule Schedule @relation(fields: [scheduleId], references: [id])
  ticket   Ticket?
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model Ticket {
  id            String   @id @default(uuid())
  userId        String
  scheduleId    String
  reservationId String   @unique
  qrCode        String?
  issuedAt      DateTime @default(now())

  user        User         @relation(fields: [userId], references: [id])
  schedule    Schedule     @relation(fields: [scheduleId], references: [id])
  reservation Reservation  @relation(fields: [reservationId], references: [id])
  transaction Transaction?
}

model Transaction {
  id        String        @id @default(uuid())
  userId    String
  ticketId  String        @unique
  amount    Float
  status    PaymentStatus @default(PENDING)
  provider  String
  reference String
  createdAt DateTime      @default(now())

  user   User   @relation(fields: [userId], references: [id])
  ticket Ticket @relation(fields: [ticketId], references: [id])
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}
